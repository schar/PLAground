Elm.Utils = Elm.Utils || {};
Elm.Utils.make = function (_elm) {
   "use strict";
   _elm.Utils = _elm.Utils || {};
   if (_elm.Utils.values)
   return _elm.Utils.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Utils",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $PLA = Elm.PLA.make(_elm),
   $Parser = Elm.Parser.make(_elm),
   $Parser$Char = Elm.Parser.Char.make(_elm),
   $Parser$Number = Elm.Parser.Number.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var evals = F4(function (lfs,
   env,
   dom,
   s) {
      return function () {
         var seq = F2(function (m,
         m$) {
            return A2($Result.andThen,
            m,
            function (xs) {
               return A2($Result.andThen,
               m$,
               function (yys) {
                  return $Result.Ok(A2($List._op["::"],
                  xs,
                  yys));
               });
            });
         });
         var cs = A2($List.scanl1,
         $Basics.flip($PLA.Conj),
         lfs);
         var xxs = A2($List.map,
         function (lf) {
            return A4($PLA.$eval,
            lf,
            env,
            dom,
            s);
         },
         cs);
         return A3($List.foldr,
         seq,
         $Result.Ok(_L.fromArray([])),
         xxs);
      }();
   });
   var chunks = F2(function (n,
   xs) {
      return function () {
         switch (xs.ctor)
         {case "[]":
            return _L.fromArray([]);}
         return A2($List._op["::"],
         A2($List.take,n,xs),
         A2(chunks,
         n,
         A2($List.drop,n,xs)));
      }();
   });
   var inpP = A2($Parser._op["<$>"],
   $Array.fromList,
   $Parser.many($Parser$Number.digit));
   var parseInp = $Parser.parse(inpP);
   var emptyEnv = function (v) {
      return $Result.Err(A2($Basics._op["++"],
      $String.fromChar(v),
      "?"));
   };
   var envP = function () {
      var addVar = function (env) {
         return A2($Parser.and,
         A2($Parser._op["<*"],
         A2($Parser._op["<$>"],
         $PLA.$switch(env),
         $Parser$Char.lower),
         $Parser.token(" -> ")),
         $Parser$Number.digit);
      };
      return A2($Parser.or,
      A2($Parser._op["<*"],
      addVar(emptyEnv),
      $Parser.end),
      A2($Parser.andThen,
      A2($Parser._op["<*"],
      addVar(emptyEnv),
      $Parser.token("\n")),
      addVar));
   }();
   var parseEnv = function (s) {
      return $Result.map(function ($) {
         return $List.head($List.reverse($));
      })(A2($Parser.parseAll,envP,s));
   };
   var is44 = function (code) {
      return _U.eq(code,
      44) ? $Result.Ok({ctor: "_Tuple0"}) : $Result.Err("not the right key code");
   };
   var onSlash = function (message) {
      return A3($Html$Events.on,
      "keydown",
      A2($Json$Decode.customDecoder,
      $Html$Events.keyCode,
      is44),
      $Basics.always(message));
   };
   var is13 = function (code) {
      return _U.eq(code,
      13) ? $Result.Ok({ctor: "_Tuple0"}) : $Result.Err("not the right key code");
   };
   var onEnter = function (message) {
      return A3($Html$Events.on,
      "keydown",
      A2($Json$Decode.customDecoder,
      $Html$Events.keyCode,
      is13),
      $Basics.always(message));
   };
   var flip2 = F4(function (f,
   b,
   c,
   a) {
      return A3(f,a,b,c);
   });
   _elm.Utils.values = {_op: _op
                       ,flip2: flip2
                       ,onEnter: onEnter
                       ,is13: is13
                       ,onSlash: onSlash
                       ,is44: is44
                       ,emptyEnv: emptyEnv
                       ,envP: envP
                       ,parseEnv: parseEnv
                       ,inpP: inpP
                       ,parseInp: parseInp
                       ,chunks: chunks
                       ,evals: evals};
   return _elm.Utils.values;
};