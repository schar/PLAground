Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $Instructions = Elm.Instructions.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $PLA = Elm.PLA.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var dispStack = function (s) {
      return $Html.li(_L.fromArray([$Html$Attributes.$class("stack")]))($List.map(function ($) {
         return $Html.text($Basics.toString($));
      })($Array.toList(s)));
   };
   var ToggleInstr = {ctor: "ToggleInstr"};
   var ToggleFormula = function (a) {
      return {ctor: "ToggleFormula"
             ,_0: a};
   };
   var CompileQuery = {ctor: "CompileQuery"};
   var AccentFormula = F2(function (a,
   b) {
      return {ctor: "AccentFormula"
             ,_0: a
             ,_1: b};
   });
   var EditInput = function (a) {
      return {ctor: "EditInput"
             ,_0: a};
   };
   var EditEnv = function (a) {
      return {ctor: "EditEnv"
             ,_0: a};
   };
   var UpdateQuery = function (a) {
      return {ctor: "UpdateQuery"
             ,_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var updates = $Signal.channel(NoOp);
   var dispInstr = function (instr) {
      return function () {
         switch (instr.ctor)
         {case "Just":
            return A2($Html.div,
              _L.fromArray([$Html$Attributes.$class("instructions")]),
              _L.fromArray([A2($Html.div,
                           _L.fromArray([$Html$Attributes.$class("instructions-close")]),
                           _L.fromArray([A2($Html.a,
                           _L.fromArray([$Html$Attributes.href("#")
                                        ,$Html$Events.onClick(A2($Signal.send,
                                        updates,
                                        ToggleInstr))]),
                           _L.fromArray([$Html.text("Close")]))]))
                           ,A2($Html.div,
                           _L.fromArray([$Html$Attributes.$class("instructions-content")]),
                           _L.fromArray([instr._0]))]));
            case "Nothing":
            return A2($Html.div,
              _L.fromArray([]),
              _L.fromArray([]));}
         _U.badCase($moduleName,
         "between lines 169 and 181");
      }();
   };
   var dispLFs = F2(function (msg,
   hist) {
      return msg ? A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("parse-msg")]),
      _L.fromArray([$Html.text("*")])) : $Html.div(_L.fromArray([$Html$Attributes.$class("lfs")]))($Basics.fst(A3($Utils.flip2,
      $List.foldl,
      {ctor: "_Tuple2"
      ,_0: _L.fromArray([])
      ,_1: {ctor: "_Tuple2"
           ,_0: Math.pow(0.8,
           $Basics.toFloat($List.length(hist) - 1))
           ,_1: 0}},
      hist)(F2(function (lf,_v2) {
         return function () {
            switch (_v2.ctor)
            {case "_Tuple2":
               switch (_v2._1.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: A2($List._op["::"],
                           A2($Html.div,
                           _L.fromArray([$Html$Attributes.classList(_L.fromArray([{ctor: "_Tuple2"
                                                                                  ,_0: "lf"
                                                                                  ,_1: true}
                                                                                 ,{ctor: "_Tuple2"
                                                                                  ,_0: "lf-inactive"
                                                                                  ,_1: $Basics.not(lf.active)}
                                                                                 ,{ctor: "_Tuple2"
                                                                                  ,_0: "lf-highlight"
                                                                                  ,_1: lf.highlight}]))
                                        ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                              ,_0: "opacity"
                                                                              ,_1: $Basics.toString(lf.active ? _v2._1._0 : 1)}]))]),
                           _L.fromArray([A2($Html.input,
                                        _L.fromArray([$Html$Attributes.$class("lf-toggle")
                                                     ,$Html$Attributes.type$("checkbox")
                                                     ,$Html$Attributes.checked($Basics.not(lf.active))
                                                     ,$Html$Events.onClick($Signal.send(updates)(ToggleFormula(_v2._1._1)))]),
                                        _L.fromArray([]))
                                        ,$Html.text($PLA.showFormula(lf.formula))])),
                           _v2._0)
                           ,_1: {ctor: "_Tuple2"
                                ,_0: 1.25 * _v2._1._0
                                ,_1: _v2._1._1 + 1}};}
                 break;}
            _U.badCase($moduleName,
            "between lines 194 and 213");
         }();
      }))));
   });
   var queryEntry = function (query) {
      return A2($Html.input,
      _L.fromArray([$Html$Attributes.id("query")
                   ,$Html$Attributes.placeholder("Enter expression, e.g. Ex e(x)")
                   ,$Html$Attributes.value(query)
                   ,$Html$Attributes.autofocus(true)
                   ,A3($Html$Events.on,
                   "input",
                   $Html$Events.targetValue,
                   function ($) {
                      return $Signal.send(updates)(UpdateQuery($));
                   })
                   ,$Utils.onEnter(A2($Signal.send,
                   updates,
                   CompileQuery))]),
      _L.fromArray([]));
   };
   var dispStacks = F3(function (_v8,
   e,
   _v9) {
      return function () {
         switch (_v9.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v8.ctor)
                 {case "_Tuple2":
                    return function () {
                         switch (_v8._0.ctor)
                         {case "Just":
                            return A2($Html.div,
                              _L.fromArray([$Html$Attributes.$class("parse-msg")]),
                              _L.fromArray([$Html.text(_v8._0._0)]));
                            case "Nothing":
                            return function () {
                                 var _v18 = A2($List.filter,
                                 function (_) {
                                    return _.active;
                                 },
                                 _v8._1);
                                 switch (_v18.ctor)
                                 {case "[]": return A2($Html.div,
                                      _L.fromArray([$Html$Attributes.id("stack-hist")]),
                                      _L.fromArray([_v9._1]));}
                                 return function () {
                                    var _v19 = A3($Utils.evals,
                                    $List.map(function (_) {
                                       return _.formula;
                                    })(A2($List.filter,
                                    function (_) {
                                       return _.active;
                                    },
                                    _v8._1)),
                                    e,
                                    _v9._0);
                                    switch (_v19.ctor)
                                    {case "Err":
                                       return A2($Html.div,
                                         _L.fromArray([$Html$Attributes.id("stack-hist")]),
                                         _L.fromArray([$Html.text("this is impossible")]));
                                       case "Ok":
                                       return $Html.div(_L.fromArray([$Html$Attributes.id("stack-hist")]))(A2($List._op["::"],
                                         _v9._1,
                                         A2($Basics.flip,
                                         $List.indexedMap,
                                         _v19._0)(F2(function (n,sl) {
                                            return $Html.div(_L.fromArray([$Html$Attributes.$class("outputs")
                                                                          ,$Html$Events.onMouseOver($Signal.send(updates)(A2(AccentFormula,
                                                                          n,
                                                                          true)))
                                                                          ,$Html$Events.onMouseLeave($Signal.send(updates)(A2(AccentFormula,
                                                                          n,
                                                                          false)))]))(function () {
                                               switch (sl.ctor)
                                               {case "[]":
                                                  return _L.fromArray([$Html.text("False")]);}
                                               return $List.map($Html.ul(_L.fromArray([$Html$Attributes.$class("stack-list")])))($Utils.chunks(10)(A2($List.map,
                                               dispStack,
                                               sl)));
                                            }());
                                         }))));}
                                    _U.badCase($moduleName,
                                    "between lines 236 and 253");
                                 }();
                              }();}
                         _U.badCase($moduleName,
                         "between lines 230 and 253");
                      }();}
                 _U.badCase($moduleName,
                 "between lines 230 and 253");
              }();}
         _U.badCase($moduleName,
         "between lines 230 and 253");
      }();
   });
   var inpEntry = function (inp) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("inp")]),
      _L.fromArray([A2($Html.input,
      _L.fromArray([$Html$Attributes.id("inp")
                   ,$Html$Attributes.placeholder("s")
                   ,A3($Html$Events.on,
                   "input",
                   $Html$Events.targetValue,
                   function ($) {
                      return $Signal.send(updates)(EditInput($));
                   })]),
      _L.fromArray([]))]));
   };
   var infoFooter = A2($Html.footer,
   _L.fromArray([$Html$Attributes.id("instr-footer")]),
   _L.fromArray([A2($Html.a,
   _L.fromArray([$Html$Attributes.href("#")
                ,$Html$Events.onClick(A2($Signal.send,
                updates,
                ToggleInstr))]),
   _L.fromArray([$Html.text("Confused?")]))]));
   var view = function (model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("page-wrap")]),
      _L.fromArray([A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("column-main")]),
      _L.fromArray([A2($Html$Lazy.lazy,
                   dispInstr,
                   model.instructions)
                   ,A3($Html$Lazy.lazy2,
                   dispLFs,
                   model.parseMsg,
                   model.lfHist)
                   ,A2($Html.div,
                   _L.fromArray([$Html$Attributes.$class("sh")]),
                   _L.fromArray([A2($Html.pre,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html.code,
                   _L.fromArray([]),
                   _L.fromArray([A2($Html$Lazy.lazy,
                   queryEntry,
                   model.query)]))]))]))
                   ,A4($Html$Lazy.lazy3,
                   dispStacks,
                   {ctor: "_Tuple2"
                   ,_0: model.refMsg
                   ,_1: model.lfHist},
                   model.env,
                   {ctor: "_Tuple2"
                   ,_0: model.startStack
                   ,_1: A2($Html$Lazy.lazy,
                   inpEntry,
                   model.startBox)})
                   ,infoFooter]))]));
   };
   var defModel = {_: {}
                  ,env: $Utils.emptyEnv
                  ,envBox: "\n"
                  ,instructions: $Maybe.Nothing
                  ,lfHist: _L.fromArray([])
                  ,parseMsg: false
                  ,query: ""
                  ,refMsg: $Maybe.Nothing
                  ,startBox: ""
                  ,startStack: $Array.empty};
   var defLF = function (form) {
      return {_: {}
             ,active: true
             ,formula: form
             ,highlight: false};
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "AccentFormula":
            return function () {
                 var newlfs = $Basics.fst(A3($Utils.flip2,
                 $List.foldl,
                 {ctor: "_Tuple2"
                 ,_0: _L.fromArray([])
                 ,_1: 0},
                 model.lfHist)(F2(function (lf,
                 _v30) {
                    return function () {
                       switch (_v30.ctor)
                       {case "_Tuple2":
                          return lf.active ? {ctor: "_Tuple2"
                                             ,_0: A2($Basics._op["++"],
                                             _v30._0,
                                             _L.fromArray([_U.eq(_v30._1,
                                             action._0) ? _U.replace([["highlight"
                                                                      ,action._1]],
                                             lf) : lf]))
                                             ,_1: _v30._1 + 1} : {ctor: "_Tuple2"
                                                                 ,_0: A2($Basics._op["++"],
                                                                 _v30._0,
                                                                 _L.fromArray([lf]))
                                                                 ,_1: _v30._1};}
                       _U.badCase($moduleName,
                       "between lines 105 and 110");
                    }();
                 })));
                 return _U.replace([["lfHist"
                                    ,newlfs]],
                 model);
              }();
            case "CompileQuery":
            return function () {
                 var formula = $PLA.parseForm(model.query);
                 return function () {
                    switch (formula.ctor)
                    {case "Err":
                       return _U.replace([["parseMsg"
                                          ,true]
                                         ,["refMsg",$Maybe.Nothing]],
                         model);
                       case "Ok": return function () {
                            var c = $List.foldl1($Basics.flip($PLA.Conj))(A2($Basics._op["++"],
                            $List.map(function (_) {
                               return _.formula;
                            })(A2($List.filter,
                            function (_) {
                               return _.active;
                            },
                            model.lfHist)),
                            _L.fromArray([formula._0])));
                            return function () {
                               var _v37 = A3($PLA.$eval,
                               c,
                               model.env,
                               model.startStack);
                               switch (_v37.ctor)
                               {case "Err":
                                  return _U.replace([["parseMsg"
                                                     ,false]
                                                    ,["refMsg"
                                                     ,$Maybe.Just(_v37._0)]],
                                    model);
                                  case "Ok":
                                  return _U.replace([["lfHist"
                                                     ,A2($Basics._op["++"],
                                                     model.lfHist,
                                                     _L.fromArray([defLF(formula._0)]))]
                                                    ,["parseMsg",false]
                                                    ,["refMsg",$Maybe.Nothing]],
                                    model);}
                               _U.badCase($moduleName,
                               "between lines 138 and 143");
                            }();
                         }();}
                    _U.badCase($moduleName,
                    "between lines 131 and 143");
                 }();
              }();
            case "EditEnv":
            return function () {
                 var newEnv = function () {
                    var _v40 = $Utils.parseEnv(action._0);
                    switch (_v40.ctor)
                    {case "Err": return model.env;
                       case "Ok": return _v40._0;}
                    _U.badCase($moduleName,
                    "between lines 87 and 90");
                 }();
                 return _U.replace([["env"
                                    ,newEnv]
                                   ,["envBox",action._0]],
                 model);
              }();
            case "EditInput":
            return function () {
                 var newInp = function () {
                    var _v43 = $Utils.parseInp(action._0);
                    switch (_v43.ctor)
                    {case "Err":
                       return model.startStack;
                       case "Ok": return _v43._0;}
                    _U.badCase($moduleName,
                    "between lines 94 and 97");
                 }();
                 return _U.replace([["startStack"
                                    ,newInp]
                                   ,["startBox",action._0]],
                 model);
              }();
            case "NoOp": return model;
            case "ToggleFormula":
            return function () {
                 var updateLFs = F2(function (n,
                 lf) {
                    return _U.eq(n,
                    action._0) ? _U.replace([["active"
                                             ,$Basics.not(lf.active)]],
                    lf) : lf;
                 });
                 var newm = _U.replace([["lfHist"
                                        ,A2($List.indexedMap,
                                        updateLFs,
                                        model.lfHist)]],
                 model);
                 var c = A2($List.foldl,
                 $Basics.flip($PLA.Conj),
                 A2($PLA.Pred,
                 _U.chr("e"),
                 $PLA.Con(2)))($List.map(function (_) {
                    return _.formula;
                 })(A2($List.filter,
                 function (_) {
                    return _.active;
                 },
                 newm.lfHist)));
                 return function () {
                    var _v46 = A3($PLA.$eval,
                    c,
                    newm.env,
                    newm.startStack);
                    switch (_v46.ctor)
                    {case "Err":
                       return _U.replace([["refMsg"
                                          ,$Maybe.Just(_v46._0)]],
                         newm);
                       case "Ok":
                       return _U.replace([["refMsg"
                                          ,$Maybe.Nothing]],
                         newm);}
                    _U.badCase($moduleName,
                    "between lines 120 and 124");
                 }();
              }();
            case "ToggleInstr":
            return function () {
                 var _v49 = model.instructions;
                 switch (_v49.ctor)
                 {case "Just":
                    return _U.replace([["instructions"
                                       ,$Maybe.Nothing]],
                      model);
                    case "Nothing":
                    return _U.replace([["instructions"
                                       ,$Maybe.Just($Instructions.instructions)]],
                      model);}
                 _U.badCase($moduleName,
                 "between lines 125 and 129");
              }();
            case "UpdateQuery":
            return _U.replace([["query"
                               ,action._0]],
              model);}
         _U.badCase($moduleName,
         "between lines 80 and 143");
      }();
   });
   var model = A3($Signal.foldp,
   update,
   defModel,
   $Signal.subscribe(updates));
   var main = A2($Signal.map,
   view,
   model);
   var LF = F3(function (a,b,c) {
      return {_: {}
             ,active: b
             ,formula: a
             ,highlight: c};
   });
   var Model = F9(function (a,
   b,
   c,
   d,
   e,
   f,
   g,
   h,
   i) {
      return {_: {}
             ,env: d
             ,envBox: c
             ,instructions: i
             ,lfHist: b
             ,parseMsg: g
             ,query: a
             ,refMsg: h
             ,startBox: e
             ,startStack: f};
   });
   _elm.Main.values = {_op: _op
                      ,Model: Model
                      ,LF: LF
                      ,defLF: defLF
                      ,defModel: defModel
                      ,NoOp: NoOp
                      ,UpdateQuery: UpdateQuery
                      ,EditEnv: EditEnv
                      ,EditInput: EditInput
                      ,AccentFormula: AccentFormula
                      ,CompileQuery: CompileQuery
                      ,ToggleFormula: ToggleFormula
                      ,ToggleInstr: ToggleInstr
                      ,update: update
                      ,view: view
                      ,dispInstr: dispInstr
                      ,dispLFs: dispLFs
                      ,queryEntry: queryEntry
                      ,dispStacks: dispStacks
                      ,dispStack: dispStack
                      ,inpEntry: inpEntry
                      ,infoFooter: infoFooter
                      ,main: main
                      ,model: model
                      ,updates: updates};
   return _elm.Main.values;
};