Elm.Random = Elm.Random || {};
Elm.Random.Extra = Elm.Random.Extra || {};
Elm.Random.Extra.make = function (_elm) {
   "use strict";
   _elm.Random = _elm.Random || {};
   _elm.Random.Extra = _elm.Random.Extra || {};
   if (_elm.Random.Extra.values)
   return _elm.Random.Extra.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Random.Extra",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm);
   var mapConstraint = F2(function (constraint,
   generator) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generator,
            seed),
            value = $._0,
            seed1 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: {ctor: "_Tuple2"
                        ,_0: value
                        ,_1: constraint(value)}
                   ,_1: seed1};
         }();
      });
   });
   var quickGenerate = F2(function (generator,
   seed) {
      return $Basics.fst(A2($Random.generate,
      generator,
      seed));
   });
   var cappedGenerateUntil = F4(function (maxGenerations,
   predicate,
   generator,
   seed) {
      return _U.cmp(maxGenerations,
      0) < 1 ? _L.fromArray([]) : function () {
         var $ = A2($Random.generate,
         generator,
         seed),
         value = $._0,
         nextSeed = $._1;
         return predicate(value) ? A2($List._op["::"],
         value,
         A4(cappedGenerateUntil,
         maxGenerations - 1,
         predicate,
         generator,
         nextSeed)) : _L.fromArray([]);
      }();
   });
   var generateUntil = F3(function (predicate,
   generator,
   seed) {
      return function () {
         var $ = A2($Random.generate,
         generator,
         seed),
         value = $._0,
         nextSeed = $._1;
         return predicate(value) ? A2($List._op["::"],
         value,
         A3(generateUntil,
         predicate,
         generator,
         nextSeed)) : _L.fromArray([]);
      }();
   });
   var generateIterativelySuchThat = F4(function (maxLength,
   predicate,
   constructor,
   seed) {
      return function () {
         var notPredicate = function (value) {
            return $Basics.not(predicate(value));
         };
         var iterate = function (index) {
            return _U.cmp(index,
            maxLength) > -1 ? _L.fromArray([]) : A2($List.append,
            A3(generateUntil,
            notPredicate,
            constructor(index),
            seed),
            iterate(index + 1));
         };
         return iterate(0);
      }();
   });
   var generateIterativelyUntil = F4(function (maxLength,
   predicate,
   constructor,
   seed) {
      return function () {
         var iterate = function (index) {
            return _U.cmp(index,
            maxLength) > -1 ? _L.fromArray([]) : A2($List.append,
            A3(generateUntil,
            predicate,
            constructor(index),
            seed),
            iterate(index + 1));
         };
         return iterate(0);
      }();
   });
   var maybeGenerateSuchThat = F4(function (numberOfTries,
   predicate,
   generator,
   seed) {
      return _U.cmp(numberOfTries,
      0) < 1 ? $Maybe.Nothing : function () {
         var $ = A2($Random.generate,
         generator,
         seed),
         value = $._0,
         nextSeed = $._1;
         return predicate(value) ? $Maybe.Just({ctor: "_Tuple2"
                                               ,_0: value
                                               ,_1: nextSeed}) : A4(maybeGenerateSuchThat,
         numberOfTries - 1,
         predicate,
         generator,
         nextSeed);
      }();
   });
   var generateSuchThat = F3(function (predicate,
   generator,
   seed) {
      return function () {
         var $ = A2($Random.generate,
         generator,
         seed),
         value = $._0,
         nextSeed = $._1;
         return predicate(value) ? {ctor: "_Tuple2"
                                   ,_0: value
                                   ,_1: nextSeed} : A3(generateSuchThat,
         predicate,
         generator,
         nextSeed);
      }();
   });
   var map6 = F7(function (f,
   generatorA,
   generatorB,
   generatorC,
   generatorD,
   generatorE,
   generatorF) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            var $ = A2($Random.generate,
            generatorE,
            seed4),
            valueE = $._0,
            seed5 = $._1;
            var $ = A2($Random.generate,
            generatorF,
            seed5),
            valueF = $._0,
            seed6 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A6(f,
                   valueA,
                   valueB,
                   valueC,
                   valueD,
                   valueE,
                   valueF)
                   ,_1: seed6};
         }();
      });
   });
   var map5 = F6(function (f,
   generatorA,
   generatorB,
   generatorC,
   generatorD,
   generatorE) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            var $ = A2($Random.generate,
            generatorE,
            seed4),
            valueE = $._0,
            seed5 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A5(f,
                   valueA,
                   valueB,
                   valueC,
                   valueD,
                   valueE)
                   ,_1: seed5};
         }();
      });
   });
   var map4 = F5(function (f,
   generatorA,
   generatorB,
   generatorC,
   generatorD) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A4(f,
                   valueA,
                   valueB,
                   valueC,
                   valueD)
                   ,_1: seed4};
         }();
      });
   });
   var map3 = F4(function (f,
   generatorA,
   generatorB,
   generatorC) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A3(f,valueA,valueB,valueC)
                   ,_1: seed3};
         }();
      });
   });
   var map2 = F3(function (f,
   generatorA,
   generatorB) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A2(f,valueA,valueB)
                   ,_1: seed2};
         }();
      });
   });
   var map = F2(function (f,
   generator) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generator,
            seed),
            value = $._0,
            nextSeed = $._1;
            return {ctor: "_Tuple2"
                   ,_0: f(value)
                   ,_1: nextSeed};
         }();
      });
   });
   var flatMap6 = F7(function (constructor,
   generatorA,
   generatorB,
   generatorC,
   generatorD,
   generatorE,
   generatorF) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            var $ = A2($Random.generate,
            generatorE,
            seed4),
            valueE = $._0,
            seed5 = $._1;
            var $ = A2($Random.generate,
            generatorF,
            seed5),
            valueF = $._0,
            seed6 = $._1;
            var generatorG = A6(constructor,
            valueA,
            valueB,
            valueC,
            valueD,
            valueE,
            valueF);
            return A2($Random.generate,
            generatorG,
            seed6);
         }();
      });
   });
   var flatMap5 = F6(function (constructor,
   generatorA,
   generatorB,
   generatorC,
   generatorD,
   generatorE) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            var $ = A2($Random.generate,
            generatorE,
            seed4),
            valueE = $._0,
            seed5 = $._1;
            var generatorF = A5(constructor,
            valueA,
            valueB,
            valueC,
            valueD,
            valueE);
            return A2($Random.generate,
            generatorF,
            seed5);
         }();
      });
   });
   var flatMap4 = F5(function (constructor,
   generatorA,
   generatorB,
   generatorC,
   generatorD) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var $ = A2($Random.generate,
            generatorD,
            seed3),
            valueD = $._0,
            seed4 = $._1;
            var generatorE = A4(constructor,
            valueA,
            valueB,
            valueC,
            valueD);
            return A2($Random.generate,
            generatorE,
            seed4);
         }();
      });
   });
   var flatMap3 = F4(function (constructor,
   generatorA,
   generatorB,
   generatorC) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var $ = A2($Random.generate,
            generatorC,
            seed2),
            valueC = $._0,
            seed3 = $._1;
            var generatorD = A3(constructor,
            valueA,
            valueB,
            valueC);
            return A2($Random.generate,
            generatorD,
            seed3);
         }();
      });
   });
   var flatMap2 = F3(function (constructor,
   generatorA,
   generatorB) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorA,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorB,
            seed1),
            valueB = $._0,
            seed2 = $._1;
            var generatorC = A2(constructor,
            valueA,
            valueB);
            return A2($Random.generate,
            generatorC,
            seed2);
         }();
      });
   });
   var flatMap = F2(function (constructor,
   generator) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generator,
            seed),
            valueA = $._0,
            seed1 = $._1;
            var generatorB = constructor(valueA);
            return A2($Random.generate,
            generatorB,
            seed1);
         }();
      });
   });
   var andThen = F2(function (generator,
   constructor) {
      return A2(flatMap,
      constructor,
      generator);
   });
   var zip6 = map6(F6(function (v0,
   v1,
   v2,
   v3,
   v4,
   v5) {
      return {ctor: "_Tuple6"
             ,_0: v0
             ,_1: v1
             ,_2: v2
             ,_3: v3
             ,_4: v4
             ,_5: v5};
   }));
   var zip5 = map5(F5(function (v0,
   v1,
   v2,
   v3,
   v4) {
      return {ctor: "_Tuple5"
             ,_0: v0
             ,_1: v1
             ,_2: v2
             ,_3: v3
             ,_4: v4};
   }));
   var zip4 = map4(F4(function (v0,
   v1,
   v2,
   v3) {
      return {ctor: "_Tuple4"
             ,_0: v0
             ,_1: v1
             ,_2: v2
             ,_3: v3};
   }));
   var zip3 = map3(F3(function (v0,
   v1,
   v2) {
      return {ctor: "_Tuple3"
             ,_0: v0
             ,_1: v1
             ,_2: v2};
   }));
   var zip = map2(F2(function (v0,
   v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }));
   var absoluteProbability = A2($Random.$float,
   -1,
   1);
   var negativeProbability = A2($Random.$float,
   -1,
   0);
   var probability = A2($Random.$float,
   0,
   1);
   var floatLessThan = function (value) {
      return A2($Random.$float,
      $Basics.toFloat($Random.minInt),
      value);
   };
   var floatGreaterThan = function (value) {
      return A2($Random.$float,
      value,
      $Basics.toFloat($Random.maxInt));
   };
   var negativeFloat = A2($Random.$float,
   $Basics.toFloat($Random.minInt),
   0);
   var positiveFloat = A2($Random.$float,
   0,
   $Basics.toFloat($Random.maxInt));
   var anyFloat = A2($Random.$float,
   $Basics.toFloat($Random.minInt),
   $Basics.toFloat($Random.maxInt));
   var intLessThan = function (value) {
      return A2($Random.$int,
      $Random.minInt,
      value - 1);
   };
   var intGreaterThan = function (value) {
      return A2($Random.$int,
      value + 1,
      $Random.maxInt);
   };
   var negativeInt = A2($Random.$int,
   $Random.minInt,
   -1);
   var positiveInt = A2($Random.$int,
   1,
   $Random.maxInt);
   var anyInt = A2($Random.$int,
   $Random.minInt,
   $Random.maxInt);
   _op["<<<"] = F2(function (generatorBC,
   generatorAB) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorAB,
            seed),
            f = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorBC,
            seed1),
            g = $._0,
            seed2 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: function ($) {
                      return g(f($));
                   }
                   ,_1: seed2};
         }();
      });
   });
   _op[">>>"] = F2(function (generatorAB,
   generatorBC) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorAB,
            seed),
            f = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generatorBC,
            seed1),
            g = $._0,
            seed2 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: function ($) {
                      return g(f($));
                   }
                   ,_1: seed2};
         }();
      });
   });
   var func = function (generatorB) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            generatorB,
            seed),
            valueB = $._0,
            seed1 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: function (a) {
                      return valueB;
                   }
                   ,_1: seed1};
         }();
      });
   };
   var func2 = function (generatorC) {
      return func(func(generatorC));
   };
   var func3 = function (generatorD) {
      return func(func2(generatorD));
   };
   var func4 = function (generatorE) {
      return func(func3(generatorE));
   };
   var func5 = function (generatorF) {
      return func(func4(generatorF));
   };
   var func6 = function (generatorG) {
      return func(func5(generatorG));
   };
   var apply = F2(function (funcGenerator,
   generator) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            funcGenerator,
            seed),
            f = $._0,
            seed1 = $._1;
            var $ = A2($Random.generate,
            generator,
            seed1),
            a = $._0,
            seed2 = $._1;
            return {ctor: "_Tuple2"
                   ,_0: f(a)
                   ,_1: seed2};
         }();
      });
   });
   var bool = $Random.customGenerator(function (seed) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$int,0,1),
         seed),
         value1 = $._0,
         seed1 = $._1;
         var $ = A2($Random.generate,
         A2($Random.$int,0,1),
         seed1),
         value2 = $._0,
         seed2 = $._1;
         return _U.eq(value1 + value2,
         1) ? {ctor: "_Tuple2"
              ,_0: false
              ,_1: seed2} : {ctor: "_Tuple2"
                            ,_0: true
                            ,_1: seed2};
      }();
   });
   var merge = F2(function (generator1,
   generator2) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var value = A2(quickGenerate,
            bool,
            seed);
            return _U.eq(value,
            true) ? A2($Random.generate,
            generator1,
            seed) : A2($Random.generate,
            generator2,
            seed);
         }();
      });
   });
   var constant = function (value) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var _ = A2($Random.generate,
            A2($Random.$int,0,1),
            seed);
            var seed1 = function () {
               switch (_.ctor)
               {case "_Tuple2": return _._1;}
               _U.badCase($moduleName,
               "on line 163, column 26 to 49");
            }();
            return {ctor: "_Tuple2"
                   ,_0: value
                   ,_1: seed1};
         }();
      });
   };
   var rangeLengthList = F3(function (minLength,
   maxLength,
   generator) {
      return A2(flatMap,
      function (len) {
         return A2($Random.list,
         len,
         generator);
      },
      A2($Random.$int,
      minLength,
      maxLength));
   });
   var emptyList = constant(_L.fromArray([]));
   var get = F2(function (index,
   list) {
      return _U.cmp(index,
      0) < 0 ? $Maybe.Nothing : function () {
         var _v3 = A2($List.drop,
         index,
         list);
         switch (_v3.ctor)
         {case "::":
            return $Maybe.Just(_v3._0);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 112 and 118");
      }();
   });
   var select = function (list) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            A2($Random.$int,
            0,
            $List.length(list) - 1),
            seed),
            index = $._0,
            nextSeed = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A2(get,index,list)
                   ,_1: nextSeed};
         }();
      });
   };
   var selectWithDefault = F2(function (defaultValue,
   list) {
      return $Random.customGenerator(function (seed) {
         return function () {
            var $ = A2($Random.generate,
            A2($Random.$int,
            0,
            $List.length(list) - 1),
            seed),
            index = $._0,
            nextSeed = $._1;
            return function () {
               var _v6 = A2(get,index,list);
               switch (_v6.ctor)
               {case "Just":
                  return {ctor: "_Tuple2"
                         ,_0: _v6._0
                         ,_1: nextSeed};
                  case "Nothing":
                  return {ctor: "_Tuple2"
                         ,_0: defaultValue
                         ,_1: nextSeed};}
               _U.badCase($moduleName,
               "between lines 150 and 152");
            }();
         }();
      });
   });
   _elm.Random.Extra.values = {_op: _op
                              ,constant: constant
                              ,emptyList: emptyList
                              ,rangeLengthList: rangeLengthList
                              ,bool: bool
                              ,anyInt: anyInt
                              ,positiveInt: positiveInt
                              ,negativeInt: negativeInt
                              ,intGreaterThan: intGreaterThan
                              ,intLessThan: intLessThan
                              ,anyFloat: anyFloat
                              ,positiveFloat: positiveFloat
                              ,negativeFloat: negativeFloat
                              ,floatGreaterThan: floatGreaterThan
                              ,floatLessThan: floatLessThan
                              ,probability: probability
                              ,negativeProbability: negativeProbability
                              ,absoluteProbability: absoluteProbability
                              ,func: func
                              ,func2: func2
                              ,func3: func3
                              ,func4: func4
                              ,func5: func5
                              ,func6: func6
                              ,apply: apply
                              ,select: select
                              ,selectWithDefault: selectWithDefault
                              ,map: map
                              ,map2: map2
                              ,map3: map3
                              ,map4: map4
                              ,map5: map5
                              ,map6: map6
                              ,flatMap: flatMap
                              ,flatMap2: flatMap2
                              ,flatMap3: flatMap3
                              ,flatMap4: flatMap4
                              ,flatMap5: flatMap5
                              ,flatMap6: flatMap6
                              ,zip: zip
                              ,zip3: zip3
                              ,zip4: zip4
                              ,zip5: zip5
                              ,zip6: zip6
                              ,andThen: andThen
                              ,merge: merge
                              ,quickGenerate: quickGenerate
                              ,cappedGenerateUntil: cappedGenerateUntil
                              ,generateIterativelyUntil: generateIterativelyUntil
                              ,generateIterativelySuchThat: generateIterativelySuchThat
                              ,generateUntil: generateUntil
                              ,generateSuchThat: generateSuchThat
                              ,maybeGenerateSuchThat: maybeGenerateSuchThat};
   return _elm.Random.Extra.values;
};